{"version":3,"sources":["components/Card/Card.component.jsx","components/CardList/CardList.component.jsx","components/SearchBox/SearchBox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","name","alt","src","id","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","res","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAK,SAAC,GAAa,IAAZC,EAAW,EAAXA,QAChB,OAAO,sBAAKC,UAAW,iBAAhB,UACP,6BAAKD,EAAQE,OACb,qBAAKC,IAAMH,EAAQE,KAAME,IAAG,+BAA0BJ,EAAQK,GAAlC,eAC5B,4BAAIL,EAAQM,aCHHC,G,MAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACE,qBAAKP,UAAW,YAAhB,SACGO,EAASC,KAAI,SAACT,GACb,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQK,WCLrBK,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OAAO,uBACLX,UAAW,SACXY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC8BDG,E,kDAhCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAY,IAJF,E,gEAQO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEf,SAAUc,S,+BAErC,IAAD,SAC2BE,KAAKR,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAA1B,GAAO,OAAEA,EAAQE,KAAKyB,cAAcC,SAASX,EAAYU,kBAElG,OACE,sBAAK1B,UAAU,MAAf,UACA,iDACE,cAAC,EAAD,CACEU,YAAa,iBACbC,aAAc,SAACiB,GACb,EAAKN,SAAS,CAACN,YAAcY,EAAEC,OAAOC,WAG1C,cAAC,EAAD,CAAUvB,SAAUiB,W,GA3BVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5b284d5a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.style.css\"\r\n\r\nexport const Card=({monster})=>{\r\n    return <div className={\"card-container\"}>\r\n    <h2>{monster.name}</h2>\r\n    <img alt ={monster.name} src={`https://robohash.org/${monster.id}?set=set2`}/>\r\n    <p>{monster.email}</p>\r\n    </div>\r\n}","import React from \"react\";\r\nimport { Card } from \"../Card/Card.component\";\r\nimport \"./CardList.style.css\";\r\n\r\nexport const CardList = ({ monsters }) => {\r\n  return (\r\n    <div className={\"card-list\"}>\r\n      {monsters.map((monster) => {\r\n        return <Card key={monster.id} monster={monster} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./SearchBox.style.css\"\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n    return <input\r\n      className={\"search\"}\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/CardList/CardList.component\";\nimport { SearchBox } from \"./components/SearchBox/SearchBox.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField:\"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n        <SearchBox\n          placeholder={\"search monster\"}\n          handleChange={(e) => {\n            this.setState({searchField : e.target.value});\n          }}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}